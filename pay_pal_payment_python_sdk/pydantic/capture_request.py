# coding: utf-8

"""
    Payments

    Call the Payments API to authorize payments, capture authorized payments, refund payments that have already been captured, and show payment information. Use the Payments API in conjunction with the <a href=\"/docs/api/orders/v2/\">Orders API</a>. For more information, see the <a href=\"/docs/checkout/\">PayPal Checkout Overview</a>.

    The version of the OpenAPI document: 2.5
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from pay_pal_payment_python_sdk.pydantic.capture_request_amount import CaptureRequestAmount
from pay_pal_payment_python_sdk.pydantic.money import Money
from pay_pal_payment_python_sdk.pydantic.payment_instruction import PaymentInstruction
from pay_pal_payment_python_sdk.pydantic.supplementary_purchase_data import SupplementaryPurchaseData

class CaptureRequest(BaseModel):
    amount: typing.Optional[CaptureRequestAmount] = Field(None, alias='amount')

    invoice_id: typing.Optional[str] = Field(None, alias='invoice_id')

    final_capture: typing.Optional[bool] = Field(None, alias='final_capture')

    note_to_payer: typing.Optional[str] = Field(None, alias='note_to_payer')

    soft_descriptor: typing.Optional[str] = Field(None, alias='soft_descriptor')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
CaptureRequest = typing.Union[SupplementaryPurchaseData,typing.Union[bool, date, datetime, dict, float, int, list, str, None]]
