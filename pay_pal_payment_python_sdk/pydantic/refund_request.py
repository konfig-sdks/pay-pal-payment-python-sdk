# coding: utf-8

"""
    Payments

    Call the Payments API to authorize payments, capture authorized payments, refund payments that have already been captured, and show payment information. Use the Payments API in conjunction with the <a href=\"/docs/api/orders/v2/\">Orders API</a>. For more information, see the <a href=\"/docs/checkout/\">PayPal Checkout Overview</a>.

    The version of the OpenAPI document: 2.5
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from pay_pal_payment_python_sdk.pydantic.money import Money
from pay_pal_payment_python_sdk.pydantic.payment_instruction2 import PaymentInstruction2

class RefundRequest(BaseModel):
    amount: typing.Optional[Money] = Field(None, alias='amount')

    # The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports. The pattern is defined by an external party and supports Unicode.
    custom_id: typing.Optional[str] = Field(None, alias='custom_id')

    # The API caller-provided external invoice ID for this order. The pattern is defined by an external party and supports Unicode.
    invoice_id: typing.Optional[str] = Field(None, alias='invoice_id')

    # The reason for the refund. Appears in both the payer's transaction history and the emails that the payer receives. The pattern is defined by an external party and supports Unicode.
    note_to_payer: typing.Optional[str] = Field(None, alias='note_to_payer')

    payment_instruction: typing.Optional[PaymentInstruction2] = Field(None, alias='payment_instruction')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
