# coding: utf-8

"""
    Payments

    Call the Payments API to authorize payments, capture authorized payments, refund payments that have already been captured, and show payment information. Use the Payments API in conjunction with the <a href=\"/docs/api/orders/v2/\">Orders API</a>. For more information, see the <a href=\"/docs/checkout/\">PayPal Checkout Overview</a>.

    The version of the OpenAPI document: 2.5
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_payment_python_sdk import schemas  # noqa: F401


class CaptureStatusDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The details of the captured payment status.
    """


    class MetaOapg:
        
        class properties:
            
            
            class reason(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 64
                    min_length = 1
                    regex=[{
                        'pattern': r'^[A-Z_]+$',
                    }]
                    enum_value_to_name = {
                        "BUYER_COMPLAINT": "BUYER_COMPLAINT",
                        "CHARGEBACK": "CHARGEBACK",
                        "ECHECK": "ECHECK",
                        "INTERNATIONAL_WITHDRAWAL": "INTERNATIONAL_WITHDRAWAL",
                        "OTHER": "OTHER",
                        "PENDING_REVIEW": "PENDING_REVIEW",
                        "RECEIVING_PREFERENCE_MANDATES_MANUAL_ACTION": "RECEIVING_PREFERENCE_MANDATES_MANUAL_ACTION",
                        "REFUNDED": "REFUNDED",
                        "TRANSACTION_APPROVED_AWAITING_FUNDING": "TRANSACTION_APPROVED_AWAITING_FUNDING",
                        "UNILATERAL": "UNILATERAL",
                        "VERIFICATION_REQUIRED": "VERIFICATION_REQUIRED",
                    }
                
                @schemas.classproperty
                def BUYER_COMPLAINT(cls):
                    return cls("BUYER_COMPLAINT")
                
                @schemas.classproperty
                def CHARGEBACK(cls):
                    return cls("CHARGEBACK")
                
                @schemas.classproperty
                def ECHECK(cls):
                    return cls("ECHECK")
                
                @schemas.classproperty
                def INTERNATIONAL_WITHDRAWAL(cls):
                    return cls("INTERNATIONAL_WITHDRAWAL")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("OTHER")
                
                @schemas.classproperty
                def PENDING_REVIEW(cls):
                    return cls("PENDING_REVIEW")
                
                @schemas.classproperty
                def RECEIVING_PREFERENCE_MANDATES_MANUAL_ACTION(cls):
                    return cls("RECEIVING_PREFERENCE_MANDATES_MANUAL_ACTION")
                
                @schemas.classproperty
                def REFUNDED(cls):
                    return cls("REFUNDED")
                
                @schemas.classproperty
                def TRANSACTION_APPROVED_AWAITING_FUNDING(cls):
                    return cls("TRANSACTION_APPROVED_AWAITING_FUNDING")
                
                @schemas.classproperty
                def UNILATERAL(cls):
                    return cls("UNILATERAL")
                
                @schemas.classproperty
                def VERIFICATION_REQUIRED(cls):
                    return cls("VERIFICATION_REQUIRED")
            __annotations__ = {
                "reason": reason,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["reason", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["reason", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        reason: typing.Union[MetaOapg.properties.reason, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CaptureStatusDetails':
        return super().__new__(
            cls,
            *args,
            reason=reason,
            _configuration=_configuration,
            **kwargs,
        )
