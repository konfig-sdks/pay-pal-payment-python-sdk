# coding: utf-8

"""
    Payments

    Call the Payments API to authorize payments, capture authorized payments, refund payments that have already been captured, and show payment information. Use the Payments API in conjunction with the <a href=\"/docs/api/orders/v2/\">Orders API</a>. For more information, see the <a href=\"/docs/checkout/\">PayPal Checkout Overview</a>.

    The version of the OpenAPI document: 2.5
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_pal_payment_python_sdk import schemas  # noqa: F401


class CaptureRequest(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Captures either a portion or the full authorized amount of an authorized payment.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def amount() -> typing.Type['CaptureRequestAmount']:
                return CaptureRequestAmount
            invoice_id = schemas.StrSchema
            final_capture = schemas.BoolSchema
            note_to_payer = schemas.StrSchema
            soft_descriptor = schemas.StrSchema
            __annotations__ = {
                "amount": amount,
                "invoice_id": invoice_id,
                "final_capture": final_capture,
                "note_to_payer": note_to_payer,
                "soft_descriptor": soft_descriptor,
            }
        
        
        class all_of_1(
            schemas.AnyTypeSchema,
        ):
        
        
            class MetaOapg:
                
                class properties:
                
                    @staticmethod
                    def amount() -> typing.Type['Money']:
                        return Money
                    
                    
                    class invoice_id(
                        schemas.StrSchema
                    ):
                        pass
                    final_capture = schemas.BoolSchema
                
                    @staticmethod
                    def payment_instruction() -> typing.Type['PaymentInstruction']:
                        return PaymentInstruction
                    
                    
                    class note_to_payer(
                        schemas.StrSchema
                    ):
                        pass
                    
                    
                    class soft_descriptor(
                        schemas.StrSchema
                    ):
                        pass
                    __annotations__ = {
                        "amount": amount,
                        "invoice_id": invoice_id,
                        "final_capture": final_capture,
                        "payment_instruction": payment_instruction,
                        "note_to_payer": note_to_payer,
                        "soft_descriptor": soft_descriptor,
                    }
        
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["amount"]) -> 'Money': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["invoice_id"]) -> MetaOapg.properties.invoice_id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["final_capture"]) -> MetaOapg.properties.final_capture: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["payment_instruction"]) -> 'PaymentInstruction': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["note_to_payer"]) -> MetaOapg.properties.note_to_payer: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["soft_descriptor"]) -> MetaOapg.properties.soft_descriptor: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["amount", "invoice_id", "final_capture", "payment_instruction", "note_to_payer", "soft_descriptor", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union['Money', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["invoice_id"]) -> typing.Union[MetaOapg.properties.invoice_id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["final_capture"]) -> typing.Union[MetaOapg.properties.final_capture, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["payment_instruction"]) -> typing.Union['PaymentInstruction', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["note_to_payer"]) -> typing.Union[MetaOapg.properties.note_to_payer, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["soft_descriptor"]) -> typing.Union[MetaOapg.properties.soft_descriptor, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["amount", "invoice_id", "final_capture", "payment_instruction", "note_to_payer", "soft_descriptor", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                amount: typing.Union['Money', schemas.Unset] = schemas.unset,
                invoice_id: typing.Union[MetaOapg.properties.invoice_id, str, schemas.Unset] = schemas.unset,
                final_capture: typing.Union[MetaOapg.properties.final_capture, bool, schemas.Unset] = schemas.unset,
                payment_instruction: typing.Union['PaymentInstruction', schemas.Unset] = schemas.unset,
                note_to_payer: typing.Union[MetaOapg.properties.note_to_payer, str, schemas.Unset] = schemas.unset,
                soft_descriptor: typing.Union[MetaOapg.properties.soft_descriptor, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    amount=amount,
                    invoice_id=invoice_id,
                    final_capture=final_capture,
                    payment_instruction=payment_instruction,
                    note_to_payer=note_to_payer,
                    soft_descriptor=soft_descriptor,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                SupplementaryPurchaseData,
                cls.all_of_1,
            ]

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> 'CaptureRequestAmount': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoice_id"]) -> MetaOapg.properties.invoice_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["final_capture"]) -> MetaOapg.properties.final_capture: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note_to_payer"]) -> MetaOapg.properties.note_to_payer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["soft_descriptor"]) -> MetaOapg.properties.soft_descriptor: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["amount", "invoice_id", "final_capture", "note_to_payer", "soft_descriptor", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union['CaptureRequestAmount', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoice_id"]) -> typing.Union[MetaOapg.properties.invoice_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["final_capture"]) -> typing.Union[MetaOapg.properties.final_capture, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note_to_payer"]) -> typing.Union[MetaOapg.properties.note_to_payer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["soft_descriptor"]) -> typing.Union[MetaOapg.properties.soft_descriptor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["amount", "invoice_id", "final_capture", "note_to_payer", "soft_descriptor", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        amount: typing.Union['CaptureRequestAmount', schemas.Unset] = schemas.unset,
        invoice_id: typing.Union[MetaOapg.properties.invoice_id, str, schemas.Unset] = schemas.unset,
        final_capture: typing.Union[MetaOapg.properties.final_capture, bool, schemas.Unset] = schemas.unset,
        note_to_payer: typing.Union[MetaOapg.properties.note_to_payer, str, schemas.Unset] = schemas.unset,
        soft_descriptor: typing.Union[MetaOapg.properties.soft_descriptor, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CaptureRequest':
        return super().__new__(
            cls,
            *args,
            amount=amount,
            invoice_id=invoice_id,
            final_capture=final_capture,
            note_to_payer=note_to_payer,
            soft_descriptor=soft_descriptor,
            _configuration=_configuration,
            **kwargs,
        )

from pay_pal_payment_python_sdk.model.capture_request_amount import CaptureRequestAmount
from pay_pal_payment_python_sdk.model.money import Money
from pay_pal_payment_python_sdk.model.payment_instruction import PaymentInstruction
from pay_pal_payment_python_sdk.model.supplementary_purchase_data import SupplementaryPurchaseData
